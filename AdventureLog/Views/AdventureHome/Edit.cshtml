@model AdventureLog.Models.Adventure
@{
    ViewBag.Title = "Edit Adventure";
}

<h2>@ViewBag.Title</h2>
<hr />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Adventure_PK)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.SystemName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.SystemName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.SystemName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.ShortDescription, 10, 80, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ShortDescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            <script>CKEDITOR.replace('Description', { customConfig: '/Scripts/ckeditor_config.js' })</script>
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.GamemasterNotes, htmlAttributes: new { @class = "control-label col-md-6" })
        <div class="col-md-10">
            @Html.TextAreaFor(model => model.GamemasterNotes, new { htmlAttributes = new { @class = "form-control" } })
            <script>CKEDITOR.replace('GamemasterNotes', { customConfig: '/Scripts/ckeditor_config.js' })</script>
            @Html.ValidationMessageFor(model => model.GamemasterNotes, "", new { @class = "text-danger" })
        </div>
    </div>



    <hr />
    <h4>Manage Players</h4>

    <script>
        $(document).ready(function () {
            var selection = "private";
            if ("@Model.IsPublic"== "True")
                selection = "public";
            if ("@Model.IsSecured" == "True")
                selection = "secure";
            $("input:radio[name='securitySettings'][value='" + selection + "']").prop('checked', true);
            $("#" + selection).addClass("active");
        });
    </script>
    <div class="row pl-3 form-group">
        <p class="col-md-12">General Security Settings:</p>

        <div id="tab" class="btn-group-vertical col-md-4" data-toggle="buttons">
            <a href="#public" class="btn btn-secondary" data-toggle="tab">
                <input class="form-check-input"
                       type="radio"
                       name="securitySettings"
                       id="publicRadio"
                       value="public"
                       checked />
                Public
            </a>
            <a href="#private" class="btn btn-secondary" data-toggle="tab">
                <input class="form-check-input"
                       type="radio"
                       name="securitySettings"
                       id="privateRadio"
                       value="private" />
                Private
            </a>
            <a href="#secure" class="btn btn-secondary" data-toggle="tab">
                <input class="form-check-input"
                       type="radio"
                       name="securitySettings"
                       id="secureRadio"
                       value="secure" />
                Secure
            </a>
        </div>

        <div class="tab-content col-md-8">
            <div class="tab-pane card" id="public">
                <h6 class="card card-header">Public:</h6>
                <div class="card card-body">
                    Can View: Anyone<br />
                    Can Comment: Invited Players Only<br />
                    Can Edit/Delete: Gamemaster Only<br />
                </div>
            </div>
            <div class="tab-pane card" id="private">
                <h6 class="card card-header">Private:</h6>
                <div class="card card-body">
                    Can View: Anyone with Invite Link<br />
                    Can Comment: Invited Players Only<br />
                    Can Edit/Delete: Gamemaster Only<br />
                </div>
            </div>
            <div class="tab-pane card" id="secure">
                <h6 class="card card-header">Secured:</h6>
                <div class="card card-body">
                    Can View: Invited and Approved Players only<br />
                    Can Comment: Invited and Approved Players only<br />
                    Can Edit/Delete: Gamemaster Only<br />
                </div>
            </div>
        </div>
    </div>


    <script type="text/javascript">
        $("#publicRadio, #privateRadio, #secureRadio").change(function () {
            if (this.value == 'public') {
                $("#IsPublic").prop('checked', true);
                $("#IsSecured").prop('checked', false);
            }
            else if (this.value == 'secure') {
                $("#IsPublic").prop('checked', false);
                $("#IsSecured").prop('checked', true);
            }
            else if (this.value == 'private') {
                $("#IsPublic").prop('checked', false);
                $("#IsSecured").prop('checked', false);
            }
        });
    </script>

    <div hidden>
        @Html.CheckBoxFor(model => model.IsPublic, new { htmlAttributes = new { @class = "form-control" } })
        @Html.CheckBoxFor(model => model.IsSecured, new { htmlAttributes = new { @class = "form-control" } })
    </div>

    <div class="form-group">
        @Html.ValidationMessageFor(model => model.InvitePassword, "", new { @class = "text-danger" })
        @Html.LabelFor(model => model.InvitePassword, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-8 input-group">
            @Html.EditorFor(model => model.InvitePassword, new { htmlAttributes = new { @class = "form-control" } })
            <div class="input-group-append">
                <script type="text/javascript">
                    function copyInviteLink(data) {
                        var textarea = document.createElement("textarea");

                        textarea.style.position = 'fixed';
                        textarea.style.top = 0;
                        textarea.style.left = 0;

                        textarea.style.width = '2em';
                        textarea.style.height = '2em';

                        textarea.style.padding = 0;

                        textarea.style.border = 'none';
                        textarea.style.outline = 'none';
                        textarea.style.boxShadow = 'none';
                        textarea.style.background = 'transparent';

                        textarea.value = data;
                        document.body.appendChild(textarea);
                        textarea.select();

                        try {
                            var isCopied = document.execCommand('copy');
                            var msg = isCopied ? 'Copied to Clipboard ' + data : 'Failed to Copy';
                            console.log(msg)
                        }
                        catch (err) {
                            console.log(err);
                        }

                        document.body.removeChild(textarea);
                    }
                </script>
                <button type="button"
                        class="btn btn-primary"
                        onclick="copyInviteLink('@String.Format("{0}Invite/{1}", Request.Url.AbsoluteUri.Substring(0, Request.Url.AbsoluteUri.Length - 4), Model.InvitePassword)')">
                    Invite Link  <i class="fa fa-copy"></i>
                </button>
            </div>
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Players, htmlAttributes: new { @class = "control-label col-md-2" })
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">User Id</th>
                    <th scope="col">Role</th>
                    <th scope="col">Can Comment/View?</th>
                </tr>
            </thead>
            <tbody>
                @{
                    List<AdventureLog.Models.Player> activePlayers = Model.Players.ToList();

                    foreach (var player in activePlayers)
                    {
                        @:<tr>
                            @:<td>@player.ApplicationUser.UserName</td>
                            @:<td>@player.PlayerRole.RoleName</td>
                            @:<td>
                                <input type="checkbox"
                                       name="activePlayers"
                                       value="@player.Player_PK"
                                       @(Html.Raw(player.IsActive ? "checked=\"checked\"" : "")) />
                            @:</td>
                        @:</tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <hr />


    @Html.HiddenFor(model => model.IsActive)
    @Html.HiddenFor(model => model.CreatedDate, new { htmlAttributes = new { @class = "form-control" } })
    @Html.HiddenFor(model => model.LastModifiedDate, new { htmlAttributes = new { @class = "form-control" } })
    @Html.HiddenFor(model => model.LastModifiedUser, new { htmlAttributes = new { @class = "form-control" } })

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-primary" />
        </div>
    </div>
</div>
}
<hr />
<div class="d-flex">
    <button class="btn btn-danger"
            data-toggle="collapse"
            href="#deleteCollapse"
            aria-expanded="true"
            aria-controls="deleteCollapse"
            role="button">
        Delete Adventure
    </button>
    <div class="collapse ml-4" id="deleteCollapse">
        @using (Html.BeginForm("DeleteAdventure", "AdventureHome"))
        {

            @Html.HiddenFor(model => model.Adventure_PK)
            <input type="submit" value="Confirm Delete" class="btn btn-outline-danger" />
        }
    </div>
</div>
<hr />

<div>
    @Html.ActionLink("Back to Details", "Details", Model.Adventure_PK, new { @class = "btn btn-secondary" })
</div>
